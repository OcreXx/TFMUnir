name: DevSecOps Workflow

on:
  push:
    branches:
      - develop
      - uat
      - main

jobs:
  devsecops:
    runs-on: self-hosted
    
    # Nombre de la imagen
    env:
      DOCKER_IMAGE_NAME: dvwa
      
    steps:
      # Determinar el entorno
      - name: Determine Environment
        id: env-map
        shell: powershell
        run: |
          if ($env:GITHUB_REF_NAME -eq "refs/heads/develop") {
            Write-Host "ENVIRONMENT_DEPLOY=dev" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          elseif ($env:GITHUB_REF_NAME -eq "refs/heads/uat") {
            Write-Host "ENVIRONMENT_DEPLOY=uat" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          elseif ($env:GITHUB_REF_NAME -eq "refs/heads/main") {
            Write-Host "ENVIRONMENT_DEPLOY=prod" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          else {
            Write-Host "Invalid branch for deployment"
            exit 1
          }
          
      #Fase de Compilación, Pruebas y Construcción
      - name: Build, Test, and Create Docker Image
        uses: ./.github/actions/build-and-test
        with:
          docker-image-name: ${{ env.DOCKER_IMAGE_NAME }}
          environment-deploy: ${{ env.ENVIRONMENT_DEPLOY }}

      #Fase de Seguridad con Snyk
      - name: Run Security Analysis
        uses: ./.github/actions/security-analysis-snyk
        with:
          docker-image-name: ${{ env.DOCKER_IMAGE_NAME }}

      #Fase de Despliegue
      - name: Deploy Application
        uses: ./.github/actions/deploy
        with:
          docker-image-name: ${{ env.DOCKER_IMAGE_NAME }}
          environment-deploy: ${{ env.ENVIRONMENT_DEPLOY }}

      # Apagar la maquina
      - name: Stop and Clean Up DVWA
        if: always()
        run: |
          docker compose down
